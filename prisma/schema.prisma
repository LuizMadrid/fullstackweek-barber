// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(cuid())
  name             String?
  email            String?          @unique
  emailVerified    DateTime?
  image            String?
  role             UserRole         @default(CLIENT)
  createdAt        DateTime         @default(now())
  accounts         Account[]
  sessions         Session[]
  bookings         Booking[]
  Barbershop       Barbershop[]
  serviceHistories ServiceHistory[]
}

enum UserRole {
  CLIENT
  BARBER
  ADMIN
}

model Barbershop {
  id               String           @id @default(uuid())
  userId           String
  name             String
  street           String           @default("Rua n√£o informada")
  number           String           @default("S/N")
  imageUrl         String           @default("https://l2hcolg1gr.ufs.sh/f/qVD1DsGQHGN7X9XkJpW51Sj6VePuoINO87sF4AmvY32gdnTa")
  about            String           @default("We are a barbershop")
  phone1           String           @unique
  phone2           String           @unique
  user             User             @relation(fields: [userId], references: [id])
  services         Service[]
  bookings         Booking[]
  serviceHistories ServiceHistory[]
}

model Service {
  id               String           @id @default(uuid())
  name             String
  price            Decimal          @db.Decimal(10, 2)
  description      String
  imageUrl         String           @default("https://l2hcolg1gr.ufs.sh/f/qVD1DsGQHGN7X9XkJpW51Sj6VePuoINO87sF4AmvY32gdnTa")
  barbershopId     String
  barbershop       Barbershop       @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
  bookings         Booking[]
  serviceHistories ServiceHistory[]
}

model Booking {
  id           String     @id @default(uuid())
  userId       String
  serviceId    String
  barbershopId String
  user         User       @relation(fields: [userId], references: [id])
  service      Service    @relation(fields: [serviceId], references: [id])
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id], onDelete: Cascade)
  date         DateTime
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ServiceHistory {
  id           String     @id @default(uuid())
  userId       String
  serviceId    String
  barbershopId String
  date         DateTime   @default(now())
  user         User       @relation(fields: [userId], references: [id])
  service      Service    @relation(fields: [serviceId], references: [id])
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
}
